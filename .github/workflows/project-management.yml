name: Project Management

on:
  issues:
    types: [opened, labeled, unlabeled, assigned, unassigned, closed, reopened]
  pull_request:
    types: [opened, edited, closed, reopened, synchronize, labeled, unlabeled, assigned, unassigned]
  project:
    types: [created, edited, deleted, closed, reopened]

jobs:
  auto-label:
    runs-on: ubuntu-latest
    steps:
      - name: Auto-label issues
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = issue.body?.toLowerCase() || '';

            // Auto-label based on title content
            const labels = [];

            if (title.includes('bug') || title.includes('error') || title.includes('fix')) {
              labels.push('type: bug');
            }

            if (title.includes('feature') || title.includes('enhancement') || title.includes('add')) {
              labels.push('type: feature');
            }

            if (title.includes('doc') || title.includes('readme') || title.includes('guide')) {
              labels.push('type: documentation');
            }

            if (title.includes('test') || title.includes('testing')) {
              labels.push('type: test');
            }

            if (title.includes('refactor') || title.includes('cleanup')) {
              labels.push('type: refactor');
            }

            // Add priority labels based on keywords
            if (title.includes('critical') || title.includes('urgent') || title.includes('blocking')) {
              labels.push('priority: critical');
            } else if (title.includes('high') || title.includes('important')) {
              labels.push('priority: high');
            } else if (title.includes('low') || title.includes('minor')) {
              labels.push('priority: low');
            } else {
              labels.push('priority: medium');
            }

            // Add status label for new issues
            if (context.payload.action === 'opened') {
              labels.push('status: needs-triage');
            }

            // Add labels if any were found
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labels
              });
            }

  auto-milestone:
    runs-on: ubuntu-latest
    steps:
      - name: Auto-assign milestone for PRs
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const baseBranch = pr.base.ref;

            // Assign milestone based on target branch
            let milestone = null;

            if (baseBranch === 'main') {
              milestone = 'Phase 1: Foundation';
            } else if (baseBranch === 'develop') {
              milestone = 'Phase 2: Core Features';
            }

            if (milestone) {
              // Get milestone number
              const milestones = await github.rest.issues.listMilestones({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open'
              });

              const targetMilestone = milestones.data.find(m => m.title === milestone);

              if (targetMilestone) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  milestone: targetMilestone.number
                });
              }
            }

  project-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Sync issues to project
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const action = context.payload.action;

            // Get project ID (you'll need to replace this with your actual project ID)
            const projectId = 'PROJECT_ID_PLACEHOLDER';

            if (action === 'opened') {
              // Add to backlog column
              console.log(`Adding issue ${issue.number} to project backlog`);
              // Note: This requires the GitHub CLI or GraphQL API
              // Implementation depends on your specific project setup
            } else if (action === 'closed') {
              // Move to done column
              console.log(`Moving issue ${issue.number} to done column`);
            }

  dependency-updates:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.user.login == 'dependabot[bot]'
    steps:
      - name: Auto-approve dependency updates
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;

            // Auto-approve minor and patch updates
            if (pr.title.includes('Bump') && !pr.title.includes('major')) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                event: 'APPROVE',
                body: 'ðŸ¤– Auto-approved dependency update (minor/patch)'
              });
            }
